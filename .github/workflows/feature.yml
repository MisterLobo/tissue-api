# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Feature CI/CD

on:
  push:
    branches: [ feature/* ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-versions: ['7.3']

    env:
      extensions: bcmath, ctype, fileinfo, intl, json, mbstring, openssl, pdo, tokenizer, xml
      key: cache-v1 # can be any string, change to clear the extension cache.
      ftphost: "sftp://156.67.222.127:65002/domains/tissueapp.xyz/public_html/api-dev"
      ftpuser: epiz_25927316
      ftppass: ${{ secrets.FTP_PASS }}
      ftproot: dev.tissue.tk
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup cache environment
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: Cache extensions
        uses: actions/cache@v1
        with:
          path: ${{ steps.cache-env.outputs.dir }}
          key: ${{ steps.cache-env.outputs.key }}
          restore-keys: ${{ steps.cache-env.outputs.key }}
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          ini-values: post_max_size=256M, short_open_tag=On
          coverage: xdebug
          tools: php-cs-fixer, phpunit, pecl
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist
      - run: sudo apt-get update
      - run: sudo apt-get install apache2-utils tar
      - name: Print contents
        run: ls -al
      - name: Print current working dir
        run: pwd
      - run: echo ${{ secrets.SSH_PRIVATE_KEY }} > id_rsa.key
      - run: echo ${{ secrets.SSH_PUBLIC_KEY }} > id_rsa.pub
      - name: git-ftp push
        uses: sebastianpopp/git-ftp-action@releases/v3
        with:
          url: ${{ env.ftphost }}
          user: ${{ env.ftpuser }}
          password: ${{ env.ftppass }}
          options: --key 'id_rsa.key' --pubkey 'id_rsa.pub'
      - run: chmod +x ./scripts/xtar.sh
      - run: ./scripts/xtar.sh env.tar.gz
      - run: chmod +x ./scripts/htpasswd.sh
      - run: ./scripts/htpasswd.sh ${{ secrets.AUTH_USER }} ${{ secrets.AUTH_PASS }}
      - run: chmod +x ./scripts/decrypt.sh
      - run: ./scripts/decypt.sh ${{ secrets.FILE_GPG_SECRET }} cienv .env
      - run: php artisan key:generate
      - name: migrate to remote db
        run: php artisan migrate:refresh --seed
      - run: ./scripts/decrypt.sh ${{ secrets.DEV_GPG_SECRET }} devenv.gpg devenv
      - run: cp devenv .env
      - run: chmod +x ./scripts/db.sh
      - run: ./scripts/db.sh mysqldev
      - run: chmod +x ./scripts/ctar.sh
      - run: ./scripts/ctar.sh vendor.tar.gz vendor
      - run: ./scripts/ctar.sh scripts.tar.gz scripts
      - name: copy file via ssh key
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          source: "vendor.tar.gz,.env,.htpasswd,scripts.tar.gz"
          target: ${{ secrets.DEV_FTP_PATH }}
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            whoami
            pwd
            cd ${{ secrets.DEV_FTP_PATH }}
            chmod +x xtar.sh
            ./xtar.sh vendor.tar.gz
            php artisan -V
            php artisan key:generate
      - name: Print contents
        run: ls -al
      - name: Print if workflow finished successfully
        run: echo workflow successful!
